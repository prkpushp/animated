name: Generate Music + Image with Vertex AI and Gemini

on:
  workflow_dispatch:
    inputs:
      prompt:
        description: 'Creative prompt (e.g., "An energetic, dreamy piano melody with a lo-fi beat and cityscape at dusk")'
        required: true
        type: string

jobs:
  generate-media:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      actions: write
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate with Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GOOGLE_CLOUD_CREDENTIALS }}
          create_credentials_file: true

      - name: Set up Google Cloud CLI
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: gothic-envelope-458808-h6
          install_components: "beta"

      - name: Ensure jq, curl, python3 are installed
        run: |
          sudo apt-get update
          sudo apt-get install -y jq curl ffmpeg python3

      - name: Generate specialized prompts and SEO data with Gemini
        id: gemini
        run: |
          set -e
          mkdir -p output
          PROMPT="${{ inputs.prompt }}"
          ACCESS_TOKEN=$(gcloud auth print-access-token)
          PROJECT_ID="gothic-envelope-458808-h6"
          LOCATION="us-central1"
          GEMINI_MODEL="gemini-1.5-flash-001" # or gemini-1.5-pro, gemini-2.5-flash if available for your project

          # --------- GENERATE SPECIALIZED PROMPTS ----------

          cat >gemini_prompt_request.json <<EOF
          {
            "contents": [
              {
                "role": "user",
                "parts": [
                  { "text": "Input: ${PROMPT}\n\nCreate two creative prompts based on the above input, for:\n1. An image generation AI (describe visual scene, mood, details)\n2. A music generation AI (describe mood, instruments, style, tempo)\nFormat:\nImage Prompt: ...\nMusic Prompt: ..." }
                ]
              }
            ]
          }
          EOF

          curl -s -X POST \
            -H "Authorization: Bearer $ACCESS_TOKEN" \
            -H "Content-Type: application/json" \
            "https://${LOCATION}-aiplatform.googleapis.com/v1/projects/${PROJECT_ID}/locations/${LOCATION}/publishers/google/models/${GEMINI_MODEL}:generateContent" \
            -d @gemini_prompt_request.json \
            -o gemini_prompts_response.json

          echo "==== Gemini response (prompts) ===="
          cat gemini_prompts_response.json

          # Defensive extraction
          HAS_PROMPT=$(jq '.candidates != null and .candidates[0].content.parts[0].text != null' gemini_prompts_response.json || echo "false")
          if [ "$HAS_PROMPT" != "true" ]; then
            # Try fallback for streaming format:
            GEN_PROMPTS_CONTENT=$(jq -r '.candidates[0].content.parts[0].text // .candidates[0].content.parts[0] // empty' gemini_prompts_response.json)
          else
            GEN_PROMPTS_CONTENT=$(jq -r '.candidates[0].content.parts[0].text' gemini_prompts_response.json)
          fi

          # If still empty, fallback to user prompt
          if [ -z "$GEN_PROMPTS_CONTENT" ]; then
            echo "Gemini did not return prompt content. Falling back to user input."
            IMAGE_PROMPT="$PROMPT"
            MUSIC_PROMPT="$PROMPT"
          else
            IMAGE_PROMPT=$(echo "$GEN_PROMPTS_CONTENT" | grep -E '^Image Prompt:' | head -n1 | sed 's/^Image Prompt:[[:space:]]*//')
            MUSIC_PROMPT=$(echo "$GEN_PROMPTS_CONTENT" | grep -E '^Music Prompt:' | head -n1 | sed 's/^Music Prompt:[[:space:]]*//')
            # Fallback if not parsed
            if [ -z "$IMAGE_PROMPT" ]; then IMAGE_PROMPT="$PROMPT"; fi
            if [ -z "$MUSIC_PROMPT" ]; then MUSIC_PROMPT="$PROMPT"; fi
          fi

          echo "Image prompt: $IMAGE_PROMPT"
          echo "Music prompt: $MUSIC_PROMPT"

          # Set outputs for later steps
          echo "image_prompt<<EOF" >> $GITHUB_OUTPUT
          echo "$IMAGE_PROMPT" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          echo "music_prompt<<EOF" >> $GITHUB_OUTPUT
          echo "$MUSIC_PROMPT" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

          # --------- GENERATE SEO DATA ----------

          cat >gemini_seo_request.json <<EOF
          {
            "contents": [
              {
                "role": "user",
                "parts": [
                  { "text": "Given this video concept: '${PROMPT}', create a JSON object with three fields: 'title' (SEO-optimized YouTube video title), 'description' (SEO-optimized YouTube video description, at least 100 words, engaging, with keywords), and 'hashtags' (an array of 5-10 relevant SEO-optimized hashtags for YouTube, no # symbol, no spaces, just the tag text). Output ONLY the JSON object." }
                ]
              }
            ]
          }
          EOF

          curl -s -X POST \
            -H "Authorization: Bearer $ACCESS_TOKEN" \
            -H "Content-Type: application/json" \
            "https://${LOCATION}-aiplatform.googleapis.com/v1/projects/${PROJECT_ID}/locations/${LOCATION}/publishers/google/models/${GEMINI_MODEL}:generateContent" \
            -d @gemini_seo_request.json \
            -o gemini_seo_response.json

          echo "==== Gemini response (seo) ===="
          cat gemini_seo_response.json

          # Extract JSON object from Gemini response
          RAW_CONTENT=$(jq -r '.candidates[0].content.parts[0].text // .candidates[0].content.parts[0] // empty' gemini_seo_response.json)
          echo "RAW_CONTENT:"
          echo "$RAW_CONTENT"
          echo "$RAW_CONTENT" > output/raw_content.txt

          SEO_JSON=$(echo "$RAW_CONTENT" | python3 -c "
import sys, json, re
data = sys.stdin.read()
data = re.sub(r'```[a-zA-Z]*', '', data)
data = re.sub(r'```', '', data).strip()
m = re.search(r'(\{.*?\})', data, re.DOTALL)
if m:
    try:
        obj = json.loads(m.group(1))
        print(json.dumps(obj, indent=2))
    except Exception as e:
        print('{}')
else:
    print('{}')
")
          echo "$SEO_JSON" > output/content.json
          echo "Generated SEO content:"
          cat output/content.json

      - name: Generate image and music with Vertex AI
        id: generate-media
        run: |
          mkdir -p output
          TIMESTAMP=$(date +'%Y%m%d%H%M%S')
          ACCESS_TOKEN=$(gcloud auth print-access-token)
          IMAGE_PROMPT="${{ steps.gemini.outputs.image_prompt }}"
          MUSIC_PROMPT="${{ steps.gemini.outputs.music_prompt }}"

          # Generate image
          echo "‚è≥ Generating image..."
          jq -n --arg prompt "$IMAGE_PROMPT" '{
            instances: [{ prompt: $prompt }],
            parameters: {
              sampleCount: 1,
              aspectRatio: "16:9"
            }
          }' > request_image.json

          curl -s -X POST \
            -H "Authorization: Bearer $ACCESS_TOKEN" \
            -H "Content-Type: application/json" \
            "https://us-central1-aiplatform.googleapis.com/v1/projects/gothic-envelope-458808-h6/locations/us-central1/publishers/google/models/imagegeneration:predict" \
            -d @request_image.json \
            -o response_image.json

          IMAGE_B64=$(jq -r '.predictions[0].bytesBase64Encoded' response_image.json)

          if [ "$IMAGE_B64" != "null" ] && [ -n "$IMAGE_B64" ]; then
            echo "$IMAGE_B64" | base64 -d > "output/image-$TIMESTAMP.png"
            echo "‚úÖ Image generated: output/image-$TIMESTAMP.png"
          else
            echo "‚ùå Failed to generate image."
            cat response_image.json
            exit 1
          fi

          # Generate music
          echo "‚è≥ Generating music..."
          jq -n --arg prompt "$MUSIC_PROMPT" '{
            instances: [{ prompt: $prompt }],
            parameters: {
              sampleCount: 1
            }
          }' > request_music.json

          curl -s -X POST \
            -H "Authorization: Bearer $ACCESS_TOKEN" \
            -H "Content-Type: application/json" \
            "https://us-central1-aiplatform.googleapis.com/v1/projects/gothic-envelope-458808-h6/locations/us-central1/publishers/google/models/lyria-002:predict" \
            -d @request_music.json \
            -o response_music.json

          AUDIO_B64=$(jq -r '.predictions[0].bytesBase64Encoded' response_music.json)

          if [ "$AUDIO_B64" != "null" ] && [ -n "$AUDIO_B64" ]; then
            echo "$AUDIO_B64" | base64 -d > "output/music-$TIMESTAMP.wav"
            echo "‚úÖ Music generated: output/music-$TIMESTAMP.wav"
          else
            echo "‚ùå Failed to generate music."
            cat response_music.json
            exit 1
          fi

      - name: üõ†Ô∏è Run Bash video script
        run: bash scripts/make_video.sh

      - name: Upload media artifact
        uses: actions/upload-artifact@v4
        with:
          name: media-output-${{ github.run_id }}-${{ github.run_number }}
          path: |
            output/
            output/raw_content.txt
          retention-days: 7
