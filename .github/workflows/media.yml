name: Generate Chill

on:
  workflow_dispatch:
    inputs:
      prompt:
        description: 'Creative prompt (e.g., "Dreamy piano melody with a lo-fi beat and cityscape at dusk")'
        required: false
        type: string
  schedule:
    - cron: '00 0 * * *' # Runs daily at 00:00 UTC (5:30 AM IST)

jobs:
  generate-media:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      actions: write
      id-token: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Authenticate with Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GOOGLE_CLOUD_CREDENTIALS }}
          create_credentials_file: true

      - name: Extract project_id
        id: extract-project-id
        run: |
          export PROJECT_ID=$(jq -r .project_id < "${{ env.GOOGLE_APPLICATION_CREDENTIALS }}")
          echo "PROJECT_ID=$PROJECT_ID" >> $GITHUB_ENV

      - name: Install deps
        run: |
          sudo apt-get update
          sudo apt-get install -y jq curl ffmpeg python3

      - name: Run media generation workflow
        run: |
          set -euo pipefail
          mkdir -p output

          PROJECT_ID="${{ env.PROJECT_ID }}"
          LOCATION="us-central1"
          GEMINI_MODEL="gemini-2.0-flash-lite-001"
          IMAGEN_MODEL="imagen-4.0-generate-preview-06-06"
          LYRIA_MODEL="lyria-002"

          PROMPT_INPUT="${{ inputs.prompt }}"
          if [ -z "$PROMPT_INPUT" ]; then
            PROMPT_INPUT="One tranquil hyperrealistic natural scene (e.g., misty pine forest, alpine lake, snowy cottage, lavender field, Japanese garden). Ultra-high resolution, soft natural lighting, peaceful and serene."
          fi

          ACCESS_TOKEN=$(gcloud auth print-access-token)
          TIMESTAMP=$(date +%Y%m%d%H%M%S)

          log() { echo -e "\n[üìå $1]\n"; }

          # --- Gemini step ---
          log "Generating prompts with Gemini..."
          cat >gemini_prompt_request.json <<EOF
          {
            "contents": [
              {
                "role": "user",
                "parts": [
                  { "text": "Input: ${PROMPT_INPUT}\n\nCreate two creative prompts:\n1. Image Prompt: ...\n2. Music Prompt: ..." }
                ]
              }
            ]
          }
          EOF

          curl -s -X POST \
            -H "Authorization: Bearer $ACCESS_TOKEN" \
            -H "Content-Type: application/json" \
            "https://${LOCATION}-aiplatform.googleapis.com/v1/projects/${PROJECT_ID}/locations/${LOCATION}/publishers/google/models/${GEMINI_MODEL}:generateContent" \
            -d @gemini_prompt_request.json \
            -o gemini_prompts_response.json

          GEN_PROMPTS_CONTENT=$(jq -r '.candidates[0].content.parts[0].text // empty' gemini_prompts_response.json)
          IMAGE_PROMPT=$(echo "$GEN_PROMPTS_CONTENT" | grep -E '^Image Prompt:' | sed 's/^Image Prompt:[[:space:]]*//')
          MUSIC_PROMPT=$(echo "$GEN_PROMPTS_CONTENT" | grep -E '^Music Prompt:' | sed 's/^Music Prompt:[[:space:]]*//')

          [ -z "$IMAGE_PROMPT" ] && IMAGE_PROMPT="$PROMPT_INPUT"
          [ -z "$MUSIC_PROMPT" ] && MUSIC_PROMPT="Calm ambient instrumental with soft textures"

          echo "üñº $IMAGE_PROMPT"
          echo "üéµ $MUSIC_PROMPT"

          # --- Imagen step ---
          log "Generating image..."
          jq -Rs --arg prompt "$IMAGE_PROMPT" '{
            instances: [{ prompt: $prompt }],
            parameters: { sampleCount: 1, aspectRatio: "16:9" }
          }' <<< "" > request_image.json

          curl -s -X POST \
            -H "Authorization: Bearer $ACCESS_TOKEN" \
            -H "Content-Type: application/json" \
            "https://${LOCATION}-aiplatform.googleapis.com/v1/projects/${PROJECT_ID}/locations/${LOCATION}/publishers/google/models/${IMAGEN_MODEL}:predict" \
            -d @request_image.json \
            -o response_image.json

          IMAGE_B64=$(jq -r '.predictions[0].bytesBase64Encoded // empty' response_image.json)
          if [ -z "$IMAGE_B64" ]; then
            log "‚ö†Ô∏è Imagen rejected prompt, retrying..."
            jq -Rs --arg prompt "A peaceful hyperrealistic landscape in 16:9 ratio, soft sunrise lighting, no people" '{
              instances: [{ prompt: $prompt }],
              parameters: { sampleCount: 1, aspectRatio: "16:9" }
            }' <<< "" > request_image_retry.json
            curl -s -X POST \
              -H "Authorization: Bearer $ACCESS_TOKEN" \
              -H "Content-Type: application/json" \
              "https://${LOCATION}-aiplatform.googleapis.com/v1/projects/${PROJECT_ID}/locations/${LOCATION}/publishers/google/models/${IMAGEN_MODEL}:predict" \
              -d @request_image_retry.json \
              -o response_image_retry.json
            IMAGE_B64=$(jq -r '.predictions[0].bytesBase64Encoded // empty' response_image_retry.json)
          fi
          echo "$IMAGE_B64" | base64 -d > "output/image-$TIMESTAMP.png"

          # --- Lyria step ---
          log "Generating music..."
          jq -Rs --arg prompt "$MUSIC_PROMPT" '{instances: [{ prompt: $prompt }], parameters: { sampleCount: 1 }}' <<< "" > request_music.json

          curl -s -X POST \
            -H "Authorization: Bearer $ACCESS_TOKEN" \
            -H "Content-Type: application/json" \
            "https://${LOCATION}-aiplatform.googleapis.com/v1/projects/${PROJECT_ID}/locations/${LOCATION}/publishers/google/models/${LYRIA_MODEL}:predict" \
            -d @request_music.json \
            -o response_music.json

          AUDIO_B64=$(jq -r '.predictions[0].bytesBase64Encoded // empty' response_music.json)
          if [ -z "$AUDIO_B64" ]; then
            log "‚ö†Ô∏è Lyria rejected prompt, retrying..."
            jq -Rs --arg prompt "A calming ambient soundscape with soft water textures and gentle tones for deep sleep" '{instances: [{ prompt: $prompt }], parameters: { sampleCount: 1 }}' <<< "" > request_music_retry.json
            curl -s -X POST \
              -H "Authorization: Bearer $ACCESS_TOKEN" \
              -H "Content-Type: application/json" \
              "https://${LOCATION}-aiplatform.googleapis.com/v1/projects/${PROJECT_ID}/locations/${LOCATION}/publishers/google/models/${LYRIA_MODEL}:predict" \
              -d @request_music_retry.json \
              -o response_music_retry.json
            AUDIO_B64=$(jq -r '.predictions[0].bytesBase64Encoded // empty' response_music_retry.json)
          fi
          echo "$AUDIO_B64" | base64 -d > "output/music-$TIMESTAMP.wav"

          # --- SEO content step ---
          log "Generating SEO JSON..."
          cat >gemini_seo_request.json <<EOF
          {
            "contents": [
              {
                "role": "user",
                "parts": [
                  { "text": "Video concept: '${PROMPT_INPUT}'. Create JSON with fields: title, description (100+ words, SEO-rich), hashtags (15-20 tags, no #)." }
                ]
              }
            ]
          }
          EOF

          curl -s -X POST \
            -H "Authorization: Bearer $ACCESS_TOKEN" \
            -H "Content-Type: application/json" \
            "https://${LOCATION}-aiplatform.googleapis.com/v1/projects/${PROJECT_ID}/locations/${LOCATION}/publishers/google/models/${GEMINI_MODEL}:generateContent" \
            -d @gemini_seo_request.json \
            -o gemini_seo_response.json

          RAW_CONTENT=$(jq -r '.candidates[0].content.parts[0].text // empty' gemini_seo_response.json)
          echo "$RAW_CONTENT" > output/raw_seo.txt
          echo "$RAW_CONTENT" | python3 -c "import sys,json,re;data=sys.stdin.read();data=re.sub(r'```[a-zA-Z]*','',data);data=re.sub(r'```','',data).strip();m=re.search(r'(\{.*\})',data,re.DOTALL);print(json.dumps(json.loads(m.group(1)),indent=2) if m else '{}')" > output/seo.json

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: media-output-${{ github.run_id }}-${{ github.run_number }}
          path: |
            output/*
          retention-days: 7
