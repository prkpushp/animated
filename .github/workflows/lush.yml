name: Generate Veo3 Video and Store as Artifact

on:
  workflow_dispatch:

jobs:
  generate-veo3:
    runs-on: ubuntu-latest

    permissions:
      contents: read
      id-token: write

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      # Authenticate to Google Cloud
      - name: Authenticate to Google Cloud
        id: auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GOOGLE_CLOUD_CREDENTIALS }}
          create_credentials_file: true

      - name: Extract Project ID from Key JSON 
        run: |
          echo '${{ secrets.GOOGLE_CLOUD_CREDENTIALS }}' > key.json
          PROJECT_ID=$(jq -r .project_id key.json)
          echo "PROJECT_ID=$PROJECT_ID" >> $GITHUB_ENV

      - name: Generate Veo 3 Video
        id: generate-video
        run: |
          set -e
          LOCATION_ID="us-central1"
          MODEL_ID="veo-3.0-fast-generate-preview"
          API_ENDPOINT="$LOCATION_ID-aiplatform.googleapis.com"
          STORAGE_URI="gs://helloranjan1/output/"

          ACCESS_TOKEN=$(gcloud auth print-access-token)

          cat > request.json <<EOF
          {
            "endpoint": "projects/$PROJECT_ID/locations/$LOCATION_ID/publishers/google/models/$MODEL_ID",
            "instances": [
              {
                "prompt": "A shirtless, athletic man and a curvy woman in a drenched, off-shoulder white dress stand close under heavy rain in a lush, ultra-green countryside. Her dress clings to her body, soaked and slightly slipping down one shoulder. The man cups her face gently, eyes locked, then leans in ‚Äî their kiss slow, deep, and passionate, as rain streams down their skin. His hand rests at her lower back, drawing her closer, their bodies pressed together. Around them, palm leaves sway in the wind, mist rises from the muddy earth. The camera captures every droplet, every breath, every trembling touch in 4K ultra-realism ‚Äî a powerful moment of desire, connection, and raw beauty in the heart of the storm""
              }
            ],
            "parameters": {
              "aspectRatio": "16:9",
              "sampleCount": 1,
              "durationSeconds": "8",
              "personGeneration": "allow_adult",
              "addWatermark": true,
              "includeRaiReason": true,
              "generateAudio": true,
              "resolution": "720p",
              "storageUri": "$STORAGE_URI"
            }
          }
          EOF

          echo "üé¨ Submitting Veo 3 generation request..."
          OPERATION_ID=$(curl -s -X POST \
            -H "Authorization: Bearer $ACCESS_TOKEN" \
            -H "Content-Type: application/json" \
            "https://${API_ENDPOINT}/v1/projects/${PROJECT_ID}/locations/${LOCATION_ID}/publishers/google/models/${MODEL_ID}:predictLongRunning" \
            -d @request.json | jq -r '.name')

          echo "operation_id=$OPERATION_ID" >> $GITHUB_OUTPUT

      - name: Poll Until Video is Ready
        id: poll-video
        run: |
          set -e
          echo "Polling for video generation completion..."

          LOCATION_ID="us-central1"
          MODEL_ID="veo-3.0-fast-generate-preview"
          API_ENDPOINT="$LOCATION_ID-aiplatform.googleapis.com"
          OPERATION_NAME="${{ steps.generate-video.outputs.operation_id }}"

          MAX_ATTEMPTS=30
          ATTEMPT=1
          while [ $ATTEMPT -le $MAX_ATTEMPTS ]; do
            cat << EOF > fetch.json
            {
              "operationName": "$OPERATION_NAME"
            }
            EOF

            RESPONSE=$(curl -s \
              -X POST \
              -H "Authorization: Bearer $(gcloud auth print-access-token)" \
              -H "Content-Type: application/json" \
              "https://${API_ENDPOINT}/v1/projects/${{ env.PROJECT_ID }}/locations/${LOCATION_ID}/publishers/google/models/${MODEL_ID}:fetchPredictOperation" \
              -d @fetch.json)

            echo "$RESPONSE" > response.json
            DONE=$(echo "$RESPONSE" | grep -o '"done": true')

            if [ -n "$DONE" ]; then
              echo "‚úÖ Video generation complete!"
              VIDEO_URI=$(echo "$RESPONSE" | jq -r '.response.videos[].gcsUri' 2>/dev/null | grep '\.mp4$' | head -n 1)
              echo "VIDEO_URI=$VIDEO_URI" >> $GITHUB_ENV
              echo "video_uri=$VIDEO_URI" >> $GITHUB_OUTPUT
              break
            fi

            echo "‚è≥ Attempt $ATTEMPT/$MAX_ATTEMPTS: Still generating. Retrying in 10 seconds..."
            sleep 10
            ATTEMPT=$((ATTEMPT + 1))
          done

          if [ -z "$VIDEO_URI" ]; then
            echo "‚ùå ERROR: Video generation did not complete in time or URI missing"
            cat response.json
            exit 1
          fi


      - name: Download Video from GCS
        run: |
          mkdir -p video_output
          VIDEO_URI=$(jq -r '.response.predictions[0].videoUri' operation_response.json)
          echo "üì• Downloading from: $VIDEO_URI"

          gsutil cp "$VIDEO_URI" video_output/veo3_output.mp4

      - name: Upload Video as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: veo3-video
          path: video_output/veo3_output.mp4
